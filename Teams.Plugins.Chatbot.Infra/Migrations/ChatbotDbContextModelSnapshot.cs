// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Teams.Plugins.Chatbot.Infra.Database;

namespace Teams.Plugins.Chatbot.Infra.Migrations
{
    [DbContext(typeof(ChatbotDbContext))]
    partial class ChatbotDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.14-servicing-32113")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Teams.Plugins.Chatbot.Core.Models.Answer", b =>
                {
                    b.Property<int>("Id");

                    b.Property<DateTime>("Created");

                    b.Property<int>("QuestionId");

                    b.Property<string>("Text");

                    b.Property<DateTime>("Updated");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.HasIndex("Text")
                        .IsUnique()
                        .HasFilter("[Text] IS NOT NULL");

                    b.ToTable("Answer");

                    b.HasData(
                        new { Id = 1, Created = new DateTime(2020, 4, 16, 22, 48, 56, 821, DateTimeKind.Local), QuestionId = 1, Text = "Off Sick", Updated = new DateTime(2020, 4, 16, 22, 48, 56, 821, DateTimeKind.Local) },
                        new { Id = 2, Created = new DateTime(2020, 4, 16, 22, 48, 56, 821, DateTimeKind.Local), QuestionId = 1, Text = "Working", Updated = new DateTime(2020, 4, 16, 22, 48, 56, 821, DateTimeKind.Local) }
                    );
                });

            modelBuilder.Entity("Teams.Plugins.Chatbot.Core.Models.AnsweredQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AnswerId");

                    b.Property<DateTime>("Created");

                    b.Property<int>("QuestionId");

                    b.Property<DateTime>("Updated");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("AnswerId");

                    b.HasIndex("QuestionId");

                    b.HasIndex("UserId");

                    b.ToTable("AnsweredQuestion");
                });

            modelBuilder.Entity("Teams.Plugins.Chatbot.Core.Models.Question", b =>
                {
                    b.Property<int>("Id");

                    b.Property<DateTime>("Created");

                    b.Property<string>("Text");

                    b.Property<DateTime>("Updated");

                    b.HasKey("Id");

                    b.HasIndex("Text")
                        .IsUnique()
                        .HasFilter("[Text] IS NOT NULL");

                    b.ToTable("Question");

                    b.HasData(
                        new { Id = 1, Created = new DateTime(2020, 4, 16, 22, 48, 56, 819, DateTimeKind.Local), Text = "Please select from the options below to indicate your status in the office today.", Updated = new DateTime(2020, 4, 16, 22, 48, 56, 820, DateTimeKind.Local) }
                    );
                });

            modelBuilder.Entity("Teams.Plugins.Chatbot.Core.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created");

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<DateTime>("Updated");

                    b.Property<string>("UserPrincipalName")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasAlternateKey("UserPrincipalName");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Teams.Plugins.Chatbot.Core.Models.Answer", b =>
                {
                    b.HasOne("Teams.Plugins.Chatbot.Core.Models.Question", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Teams.Plugins.Chatbot.Core.Models.AnsweredQuestion", b =>
                {
                    b.HasOne("Teams.Plugins.Chatbot.Core.Models.Answer", "Answer")
                        .WithMany()
                        .HasForeignKey("AnswerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Teams.Plugins.Chatbot.Core.Models.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Teams.Plugins.Chatbot.Core.Models.User", "User")
                        .WithMany("AnsweredQuestions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
